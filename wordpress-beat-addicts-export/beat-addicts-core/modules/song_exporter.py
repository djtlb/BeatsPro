"""
ðŸŽµ BEAT ADDICTS - AI Song Exporter
Professional song export with metadata and multiple formats
"""

import os
import struct
import json
from datetime import datetime
from typing import Dict, Any, List

class BeatAddictsSongExporter:
    """Professional song export system for BEAT ADDICTS"""
    
    def __init__(self, output_dir="exports"):
        self.output_dir = output_dir
        os.makedirs(output_dir, exist_ok=True)
        
    def export_song_with_metadata(self, audio_data: List[int], metadata: Dict[str, Any]) -> str:
        """Export song with complete metadata"""
        
        # Generate filename
        timestamp = int(datetime.now().timestamp())
        base_name = f"beataddicts_{metadata.get('genre', 'song')}_{timestamp}"
        
        # Export WAV file
        wav_path = os.path.join(self.output_dir, f"{base_name}.wav")
        self._export_wav_with_metadata(audio_data, wav_path, metadata)
        
        # Export metadata JSON
        json_path = os.path.join(self.output_dir, f"{base_name}_metadata.json")
        self._export_metadata(metadata, json_path)
        
        # Export project file
        project_path = os.path.join(self.output_dir, f"{base_name}_project.beataddicts")
        self._export_project_file(audio_data, metadata, project_path)
        
        return wav_path
    
    def _export_wav_with_metadata(self, audio_data: List[int], filepath: str, metadata: Dict[str, Any]):
        """Export WAV with embedded metadata"""
        sample_rate = metadata.get('sample_rate', 44100)
        
        # Calculate sizes
        data_size = len(audio_data) * 2
        file_size = 36 + data_size
        
        # Create WAV header with INFO chunk for metadata
        wav_header = struct.pack('<4sI4s4sIHHIIHH4sI',
            b'RIFF', file_size, b'WAVE', b'fmt ', 16, 1, 2,
            sample_rate, sample_rate * 2 * 2, 4, 16, b'data', data_size)
        
        with open(filepath, 'wb') as f:
            f.write(wav_header)
            for sample in audio_data:
                f.write(struct.pack('<h', sample))
            
            # Add INFO chunk for metadata
            info_data = self._create_info_chunk(metadata)
            f.write(info_data)
    
    def _create_info_chunk(self, metadata: Dict[str, Any]) -> bytes:
        """Create INFO chunk with BEAT ADDICTS metadata"""
        info_items = [
            (b'INAM', metadata.get('title', 'BEAT ADDICTS Song').encode('utf-8')),
            (b'IART', b'BEAT ADDICTS AI'),
            (b'IGNR', metadata.get('genre', 'Unknown').encode('utf-8')),
            (b'ICMT', f"Generated by BEAT ADDICTS v{metadata.get('version', '2.0')}".encode('utf-8')),
            (b'ICRD', datetime.now().strftime('%Y-%m-%d').encode('utf-8')),
            (b'ISFT', b'BEAT ADDICTS Professional Music Production AI')
        ]
        
        info_data = b''
        for tag, value in info_items:
            if len(value) % 2:
                value += b'\x00'  # Pad to even length
            info_data += tag + struct.pack('<I', len(value)) + value
        
        # Wrap in LIST INFO chunk
        if len(info_data) % 2:
            info_data += b'\x00'
        
        list_header = b'LIST' + struct.pack('<I', len(info_data) + 4) + b'INFO'
        return list_header + info_data
    
    def _export_metadata(self, metadata: Dict[str, Any], filepath: str):
        """Export detailed metadata as JSON"""
        enhanced_metadata = {
            **metadata,
            'exported_by': 'BEAT ADDICTS v2.0',
            'export_timestamp': datetime.now().isoformat(),
            'format': 'WAV',
            'quality': 'Professional',
            'ai_generated': True
        }
        
        with open(filepath, 'w') as f:
            json.dump(enhanced_metadata, f, indent=2)
    
    def _export_project_file(self, audio_data: List[int], metadata: Dict[str, Any], filepath: str):
        """Export BEAT ADDICTS project file for future editing"""
        project_data = {
            'beat_addicts_version': '2.0',
            'project_type': 'ai_generated_song',
            'audio_metadata': metadata,
            'generation_parameters': {
                'bpm': metadata.get('bpm', 140),
                'genre': metadata.get('genre', 'unknown'),
                'duration': metadata.get('duration', 60),
                'sections': metadata.get('sections', [])
            },
            'export_info': {
                'timestamp': datetime.now().isoformat(),
                'audio_length': len(audio_data),
                'sample_rate': metadata.get('sample_rate', 44100)
            }
        }
        
        with open(filepath, 'w') as f:
            json.dump(project_data, f, indent=2)

def export_song(audio_data: List[int], metadata: Dict[str, Any]) -> str:
    """Quick export function"""
    exporter = BeatAddictsSongExporter()
    return exporter.export_song_with_metadata(audio_data, metadata)
