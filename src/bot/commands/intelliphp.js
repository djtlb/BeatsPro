const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const fs = require('fs').promises;
const path = require('path');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('intelliphp')
        .setDescription('IntelliPHP AI Autocomplete for PHP')
        .addSubcommand(subcommand =>
            subcommand
                .setName('info')
                .setDescription('Get information about IntelliPHP')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('Setup instructions for IntelliPHP')
        )
        .addSubcommand(subcommand =>
            subcommand
                .setName('troubleshoot')
                .setDescription('Troubleshooting guide for IntelliPHP')
        ),

    async execute(interaction) {
        const subcommand = interaction.options.getSubcommand();

        switch (subcommand) {
            case 'info':
                await this.handleInfo(interaction);
                break;
            case 'setup':
                await this.handleSetup(interaction);
                break;
            case 'troubleshoot':
                await this.handleTroubleshoot(interaction);
                break;
        }
    },

    async handleInfo(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#0099ff')
            .setTitle('üß† IntelliPHP - AI Autocomplete for PHP')
            .setDescription('Advanced AI-assisted development tool for PHP programmers')
            .addFields(
                { name: 'üöÄ Key Features', value: '‚Ä¢ AI Auto-completion\n‚Ä¢ Code Snippets\n‚Ä¢ Framework Support\n‚Ä¢ Local Processing\n‚Ä¢ CPU Optimized', inline: true },
                { name: '‚ö° Performance', value: '‚Ä¢ No GPU required\n‚Ä¢ Zero latency\n‚Ä¢ Secure & Private\n‚Ä¢ Works offline', inline: true },
                { name: 'üîß Frameworks', value: '‚Ä¢ Laravel\n‚Ä¢ WordPress\n‚Ä¢ Drupal\n‚Ä¢ Custom PHP', inline: true }
            )
            .setFooter({ text: 'IntelliPHP keeps your code secure and private' });

        await interaction.reply({ embeds: [embed] });
    },

    async handleSetup(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#00ff00')
            .setTitle('‚öôÔ∏è IntelliPHP Setup Guide')
            .addFields(
                { name: '1. Installation', value: '```\nInstall DEVSENSE.intelli-php-vscode extension\n```' },
                { name: '2. Configuration', value: '```json\n{\n  "intelliphp.inlineSuggestionsEnabled": true,\n  "editor.inlineSuggest.enabled": true\n}\n```' },
                { name: '3. Usage', value: '‚Ä¢ Press **TAB** to accept suggestions\n‚Ä¢ **Ctrl + Right Arrow** for word completion\n‚Ä¢ Continue typing to dismiss suggestions' },
                { name: '4. Keyboard Shortcuts', value: '‚Ä¢ `TAB` - Accept suggestion\n‚Ä¢ `TAB` (again) - Complete snippet\n‚Ä¢ `Ctrl + ‚Üí` - Accept word' }
            );

        await interaction.reply({ embeds: [embed] });
    },

    async handleTroubleshoot(interaction) {
        const embed = new EmbedBuilder()
            .setColor('#ff9900')
            .setTitle('üîß IntelliPHP Troubleshooting')
            .addFields(
                { name: 'üìã Check Settings', value: '‚Ä¢ Verify `editor.inlineSuggest.enabled` is `true`\n‚Ä¢ Ensure IntelliPHP extension is enabled' },
                { name: 'üìä Logs & Diagnostics', value: '‚Ä¢ Check OUTPUT ‚Üí "IntelliPHP" tab\n‚Ä¢ Run `IntelliPHP: About...` command' },
                { name: 'üîÑ Common Fixes', value: '‚Ä¢ Restart VSCode\n‚Ä¢ Reload window (Ctrl+Shift+P)\n‚Ä¢ Check extension permissions' },
                { name: 'üí° Performance Tips', value: '‚Ä¢ Close unused PHP files\n‚Ä¢ Disable other autocomplete extensions\n‚Ä¢ Ensure sufficient RAM available' }
            );

        await interaction.reply({ embeds: [embed] });
    }
};
